
use clap::Parser;
use futures::{future, prelude::*};
use rand::{
    distributions::{Distribution, Uniform},
    thread_rng,
};
use std::{
    net::{IpAddr, Ipv6Addr, SocketAddr},
    time::Duration,
};
use std::net::Ipv4Addr;
use std::process::exit;
use tarpc::{client, context, server::{self, incoming::Incoming, Channel}, tokio_serde::formats::Json};
use tokio::time;
use tracing::Instrument;
use tarpc_server::{World, WorldClient};

#[derive(Parser)]
struct Flags {
    /// Sets the port number to listen on.
    #[clap(long)]
    port: u16,
}

// This is the type that implements the generated World trait. It is the business logic
// and is used to start the server.
#[derive(Clone)]
struct HelloServer(SocketAddr);

#[tarpc::server]
impl World for HelloServer {
    async fn hello(self, _: context::Context, req: i32) -> i32 {
        req + 1
    }
}

//run --release --package tarpc-server --bin tarpc-server
#[tokio::main]
async fn main() -> anyhow::Result<()> {

    tokio::spawn(async {
        tokio::time::sleep(Duration::from_secs(1)).await;
        println!("start bench");
        run().await;
    });

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&"0.0.0.0:10000", Json::default).await?;
    println!("Starting tcp server on {}", "0.0.0.0:10000");
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = HelloServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}

async fn run(){
    let mut transport = tarpc::serde_transport::tcp::connect("127.0.0.1:10000", Json::default);
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = WorldClient::new(client::Config::default(), transport.await.unwrap()).spawn();

    let now = std::time::Instant::now();
    let total = 100000;
    for _ in 0..total {
        let resp: i32 = client.hello(context::current(), 1).await.unwrap();
    }
    now.qps(total);
    now.time(total);
    _ = exit(0);
}


pub trait QPS {
    fn qps(&self, total: u64);
    fn time(&self, total: u64);
    fn cost(&self);
}

impl QPS for std::time::Instant {
    fn qps(&self, total: u64) {
        let time = self.elapsed();
        println!(
            "Total {},QPS: {} QPS/s",
            total,
            (total as u128 * 1000000000 as u128 / time.as_nanos() as u128)
        );
    }

    fn time(&self, total: u64) {
        let time = self.elapsed();
        println!(
            "Total {},Time: {:?} ,each:{} ns/op",
            total,
            &time,
            time.as_nanos() / (total as u128)
        );
    }

    fn cost(&self) {
        let time = self.elapsed();
        println!("cost:{:?}", time);
    }
}